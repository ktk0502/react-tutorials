{"ast":null,"code":"// src/notifyManager.ts\nvar defaultScheduler = cb => setTimeout(cb, 0);\n\nfunction createNotifyManager() {\n  let queue = [];\n  let transactions = 0;\n\n  let notifyFn = callback => {\n    callback();\n  };\n\n  let batchNotifyFn = callback => {\n    callback();\n  };\n\n  let scheduleFn = defaultScheduler;\n\n  const schedule = callback => {\n    if (transactions) {\n      queue.push(callback);\n    } else {\n      scheduleFn(() => {\n        notifyFn(callback);\n      });\n    }\n  };\n\n  const flush = () => {\n    const originalQueue = queue;\n    queue = [];\n\n    if (originalQueue.length) {\n      scheduleFn(() => {\n        batchNotifyFn(() => {\n          originalQueue.forEach(callback => {\n            notifyFn(callback);\n          });\n        });\n      });\n    }\n  };\n\n  return {\n    batch: callback => {\n      let result;\n      transactions++;\n\n      try {\n        result = callback();\n      } finally {\n        transactions--;\n\n        if (!transactions) {\n          flush();\n        }\n      }\n\n      return result;\n    },\n\n    /**\n     * All calls to the wrapped function will be batched.\n     */\n    batchCalls: callback => {\n      return function () {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        schedule(() => {\n          callback(...args);\n        });\n      };\n    },\n    schedule,\n\n    /**\n     * Use this method to set a custom notify function.\n     * This can be used to for example wrap notifications with `React.act` while running tests.\n     */\n    setNotifyFunction: fn => {\n      notifyFn = fn;\n    },\n\n    /**\n     * Use this method to set a custom function to batch notifications together into a single tick.\n     * By default React Query will use the batch function provided by ReactDOM or React Native.\n     */\n    setBatchNotifyFunction: fn => {\n      batchNotifyFn = fn;\n    },\n    setScheduler: fn => {\n      scheduleFn = fn;\n    }\n  };\n}\n\nvar notifyManager = createNotifyManager();\nexport { createNotifyManager, defaultScheduler, notifyManager };","map":{"version":3,"mappings":";AAYO,IAAMA,mBAAsCC,EAAD,IAAQC,WAAWD,EAAX,EAAe,CAAf,CAAnD;;AAEA,SAASE,mBAAT,GAA+B;EACpC,IAAIC,QAA+B,EAAnC;EACA,IAAIC,eAAe,CAAnB;;EACA,IAAIC,WAA4BC,QAAD,IAAc;IAC3CA;EACF,CAFA;;EAGA,IAAIC,gBAAsCD,QAAD,IAA0B;IACjEA;EACF,CAFA;;EAGA,IAAIE,aAAaT,gBAAjB;;EAEA,MAAMU,WAAYH,QAAD,IAAoC;IACnD,IAAIF,YAAJ,EAAkB;MAChBD,MAAMO,IAAN,CAAWJ,QAAX;IACF,CAFA,MAEO;MACLE,WAAW,MAAM;QACfH,SAASC,QAAT;MACD,CAFD;IAGF;EACF,CARA;;EASA,MAAMK,QAAQ,MAAY;IACxB,MAAMC,gBAAgBT,KAAtB;IACAA,QAAQ,EAAR;;IACA,IAAIS,cAAcC,MAAlB,EAA0B;MACxBL,WAAW,MAAM;QACfD,cAAc,MAAM;UAClBK,cAAcE,OAAd,CAAuBR,QAAD,IAAc;YAClCD,SAASC,QAAT;UACD,CAFD;QAGD,CAJD;MAKD,CAND;IAOF;EACF,CAZA;;EAcA,OAAO;IACLS,OAAWT,QAAJ,IAA6B;MAClC,IAAIU,MAAJ;MACAZ;;MACA,IAAI;QACFY,SAASV,UAAT;MACF,CAFA,SAEE;QACAF;;QACA,IAAI,CAACA,YAAL,EAAmB;UACjBO;QACF;MACF;;MACA,OAAOK,MAAP;IACF,CAbK;;IAaL;AAAA;AAAA;IAIAC,YACEX,QADU,IAEgB;MAC1B,OAAO,YAAa;QAAA,kCAATY,IAAS;UAATA,IAAS;QAAA;;QAClBT,SAAS,MAAM;UACbH,SAAS,GAAGY,IAAZ;QACD,CAFD;MAGF,CAJA;IAKF,CAzBK;IA0BLT,QA1BK;;IA0BL;AAAA;AAAA;AAAA;IAKAU,mBAAoBC,EAAD,IAAwB;MACzCf,WAAWe,EAAX;IACF,CAjCK;;IAiCL;AAAA;AAAA;AAAA;IAKAC,wBAAyBD,EAAD,IAA6B;MACnDb,gBAAgBa,EAAhB;IACF,CAxCK;IAyCLE,cAAeF,EAAD,IAA0B;MACtCZ,aAAaY,EAAb;IACF;EA3CK,CAAP;AA6CF;;AAGO,IAAMG,gBAAgBrB,qBAAtB","names":["defaultScheduler","cb","setTimeout","createNotifyManager","queue","transactions","notifyFn","callback","batchNotifyFn","scheduleFn","schedule","push","flush","originalQueue","length","forEach","batch","result","batchCalls","args","setNotifyFunction","fn","setBatchNotifyFunction","setScheduler","notifyManager"],"sources":["/Users/kartikaypratapsingh/Desktop/React_tut/React-query/client/node_modules/@tanstack/query-core/src/notifyManager.ts"],"sourcesContent":["// TYPES\n\ntype NotifyCallback = () => void\n\ntype NotifyFunction = (callback: () => void) => void\n\ntype BatchNotifyFunction = (callback: () => void) => void\n\ntype BatchCallsCallback<T extends Array<unknown>> = (...args: T) => void\n\ntype ScheduleFunction = (callback: () => void) => void\n\nexport const defaultScheduler: ScheduleFunction = (cb) => setTimeout(cb, 0)\n\nexport function createNotifyManager() {\n  let queue: Array<NotifyCallback> = []\n  let transactions = 0\n  let notifyFn: NotifyFunction = (callback) => {\n    callback()\n  }\n  let batchNotifyFn: BatchNotifyFunction = (callback: () => void) => {\n    callback()\n  }\n  let scheduleFn = defaultScheduler\n\n  const schedule = (callback: NotifyCallback): void => {\n    if (transactions) {\n      queue.push(callback)\n    } else {\n      scheduleFn(() => {\n        notifyFn(callback)\n      })\n    }\n  }\n  const flush = (): void => {\n    const originalQueue = queue\n    queue = []\n    if (originalQueue.length) {\n      scheduleFn(() => {\n        batchNotifyFn(() => {\n          originalQueue.forEach((callback) => {\n            notifyFn(callback)\n          })\n        })\n      })\n    }\n  }\n\n  return {\n    batch: <T>(callback: () => T): T => {\n      let result\n      transactions++\n      try {\n        result = callback()\n      } finally {\n        transactions--\n        if (!transactions) {\n          flush()\n        }\n      }\n      return result\n    },\n    /**\n     * All calls to the wrapped function will be batched.\n     */\n    batchCalls: <T extends Array<unknown>>(\n      callback: BatchCallsCallback<T>,\n    ): BatchCallsCallback<T> => {\n      return (...args) => {\n        schedule(() => {\n          callback(...args)\n        })\n      }\n    },\n    schedule,\n    /**\n     * Use this method to set a custom notify function.\n     * This can be used to for example wrap notifications with `React.act` while running tests.\n     */\n    setNotifyFunction: (fn: NotifyFunction) => {\n      notifyFn = fn\n    },\n    /**\n     * Use this method to set a custom function to batch notifications together into a single tick.\n     * By default React Query will use the batch function provided by ReactDOM or React Native.\n     */\n    setBatchNotifyFunction: (fn: BatchNotifyFunction) => {\n      batchNotifyFn = fn\n    },\n    setScheduler: (fn: ScheduleFunction) => {\n      scheduleFn = fn\n    },\n  } as const\n}\n\n// SINGLETON\nexport const notifyManager = createNotifyManager()\n"]},"metadata":{},"sourceType":"module"}