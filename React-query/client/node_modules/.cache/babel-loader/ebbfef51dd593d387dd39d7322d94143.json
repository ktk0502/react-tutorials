{"ast":null,"code":"\"use client\"; // src/useMutationState.ts\n\nimport * as React from \"react\";\nimport { notifyManager, replaceEqualDeep } from \"@tanstack/query-core\";\nimport { useQueryClient } from \"./QueryClientProvider.js\";\n\nfunction useIsMutating(filters, queryClient) {\n  const client = useQueryClient(queryClient);\n  return useMutationState({\n    filters: { ...filters,\n      status: \"pending\"\n    }\n  }, client).length;\n}\n\nfunction getResult(mutationCache, options) {\n  return mutationCache.findAll(options.filters).map(mutation => options.select ? options.select(mutation) : mutation.state);\n}\n\nfunction useMutationState() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let queryClient = arguments.length > 1 ? arguments[1] : undefined;\n  const mutationCache = useQueryClient(queryClient).getMutationCache();\n  const optionsRef = React.useRef(options);\n  const result = React.useRef(null);\n\n  if (!result.current) {\n    result.current = getResult(mutationCache, options);\n  }\n\n  React.useEffect(() => {\n    optionsRef.current = options;\n  });\n  return React.useSyncExternalStore(React.useCallback(onStoreChange => mutationCache.subscribe(() => {\n    const nextResult = replaceEqualDeep(result.current, getResult(mutationCache, optionsRef.current));\n\n    if (result.current !== nextResult) {\n      result.current = nextResult;\n      notifyManager.schedule(onStoreChange);\n    }\n  }), [mutationCache]), () => result.current, () => result.current);\n}\n\nexport { useIsMutating, useMutationState };","map":{"version":3,"mappings":";;AACA,YAAYA,KAAZ,MAAuB,OAAvB;AAEA,SAASC,aAAT,EAAwBC,gBAAxB,QAAgD,sBAAhD;AACA,SAASC,cAAT,QAA+B,0BAA/B;;AASO,SAASC,aAAT,CACLC,OADK,EAELC,WAFK,EAGG;EACR,MAAMC,SAASJ,eAAeG,WAAf,CAAf;EACA,OAAOE,iBACL;IAAEH,SAAS,EAAE,GAAGA,OAAL;MAAcI,QAAQ;IAAtB;EAAX,CADK,EAELF,MAFK,EAGLG,MAHF;AAIF;;AAOA,SAASC,SAAT,CACEC,aADF,EAEEC,OAFF,EAGkB;EAChB,OAAOD,cACJE,OADI,CACID,QAAQR,OADZ,EAEJU,GAFI,CAGFC,QAAD,IACGH,QAAQI,MAAR,GAAiBJ,QAAQI,MAAR,CAAeD,QAAf,CAAjB,GAA4CA,SAASE,KAJrD,CAAP;AAMF;;AAEO,SAASV,gBAAT,GAGW;EAAA,IAFhBK,OAEgB,uEAFyB,EAEzB;EAAA,IADhBP,WACgB;EAChB,MAAMM,gBAAgBT,eAAeG,WAAf,EAA4Ba,gBAA5B,EAAtB;EACA,MAAMC,aAAmBpB,aAAOa,OAAP,CAAzB;EACA,MAAMQ,SAAerB,aAAuB,IAAvB,CAArB;;EACA,IAAI,CAACqB,OAAOC,OAAZ,EAAqB;IACnBD,OAAOC,OAAP,GAAiBX,UAAUC,aAAV,EAAyBC,OAAzB,CAAjB;EACF;;EAEMb,gBAAU,MAAM;IACpBoB,WAAWE,OAAX,GAAqBT,OAArB;EACD,CAFK;EAIN,OAAab,2BACLA,kBACHuB,aAAD,IACEX,cAAcY,SAAd,CAAwB,MAAM;IAC5B,MAAMC,aAAavB,iBACjBmB,OAAOC,OADU,EAEjBX,UAAUC,aAAV,EAAyBQ,WAAWE,OAApC,CAFiB,CAAnB;;IAIA,IAAID,OAAOC,OAAP,KAAmBG,UAAvB,EAAmC;MACjCJ,OAAOC,OAAP,GAAiBG,UAAjB;MACAxB,cAAcyB,QAAd,CAAuBH,aAAvB;IACF;EACD,CATD,CAFE,EAYJ,CAACX,aAAD,CAZI,CADK,EAeX,MAAMS,OAAOC,OAfF,EAgBX,MAAMD,OAAOC,OAhBF,CAAb;AAkBF","names":["React","notifyManager","replaceEqualDeep","useQueryClient","useIsMutating","filters","queryClient","client","useMutationState","status","length","getResult","mutationCache","options","findAll","map","mutation","select","state","getMutationCache","optionsRef","result","current","onStoreChange","subscribe","nextResult","schedule"],"sources":["/Users/kartikaypratapsingh/Desktop/React_tut/React-query/client/node_modules/@tanstack/react-query/src/useMutationState.ts"],"sourcesContent":["'use client'\nimport * as React from 'react'\n\nimport { notifyManager, replaceEqualDeep } from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport type {\n  Mutation,\n  MutationCache,\n  MutationFilters,\n  MutationState,\n  QueryClient,\n} from '@tanstack/query-core'\n\nexport function useIsMutating(\n  filters?: MutationFilters,\n  queryClient?: QueryClient,\n): number {\n  const client = useQueryClient(queryClient)\n  return useMutationState(\n    { filters: { ...filters, status: 'pending' } },\n    client,\n  ).length\n}\n\ntype MutationStateOptions<TResult = MutationState> = {\n  filters?: MutationFilters\n  select?: (mutation: Mutation) => TResult\n}\n\nfunction getResult<TResult = MutationState>(\n  mutationCache: MutationCache,\n  options: MutationStateOptions<TResult>,\n): Array<TResult> {\n  return mutationCache\n    .findAll(options.filters)\n    .map(\n      (mutation): TResult =>\n        (options.select ? options.select(mutation) : mutation.state) as TResult,\n    )\n}\n\nexport function useMutationState<TResult = MutationState>(\n  options: MutationStateOptions<TResult> = {},\n  queryClient?: QueryClient,\n): Array<TResult> {\n  const mutationCache = useQueryClient(queryClient).getMutationCache()\n  const optionsRef = React.useRef(options)\n  const result = React.useRef<Array<TResult>>(null)\n  if (!result.current) {\n    result.current = getResult(mutationCache, options)\n  }\n\n  React.useEffect(() => {\n    optionsRef.current = options\n  })\n\n  return React.useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        mutationCache.subscribe(() => {\n          const nextResult = replaceEqualDeep(\n            result.current,\n            getResult(mutationCache, optionsRef.current),\n          )\n          if (result.current !== nextResult) {\n            result.current = nextResult\n            notifyManager.schedule(onStoreChange)\n          }\n        }),\n      [mutationCache],\n    ),\n    () => result.current,\n    () => result.current,\n  )!\n}\n"]},"metadata":{},"sourceType":"module"}