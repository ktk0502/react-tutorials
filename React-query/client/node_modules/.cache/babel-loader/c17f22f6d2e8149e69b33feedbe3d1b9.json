{"ast":null,"code":"// src/focusManager.ts\nimport { Subscribable } from \"./subscribable.js\";\nimport { isServer } from \"./utils.js\";\nvar FocusManager = class extends Subscribable {\n  #focused;\n  #cleanup;\n  #setup;\n\n  constructor() {\n    super();\n\n    this.#setup = onFocus => {\n      if (!isServer && window.addEventListener) {\n        const listener = () => onFocus();\n\n        window.addEventListener(\"visibilitychange\", listener, false);\n        return () => {\n          window.removeEventListener(\"visibilitychange\", listener);\n        };\n      }\n\n      return;\n    };\n  }\n\n  onSubscribe() {\n    if (!this.#cleanup) {\n      this.setEventListener(this.#setup);\n    }\n  }\n\n  onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.#cleanup?.();\n      this.#cleanup = void 0;\n    }\n  }\n\n  setEventListener(setup) {\n    this.#setup = setup;\n    this.#cleanup?.();\n    this.#cleanup = setup(focused => {\n      if (typeof focused === \"boolean\") {\n        this.setFocused(focused);\n      } else {\n        this.onFocus();\n      }\n    });\n  }\n\n  setFocused(focused) {\n    const changed = this.#focused !== focused;\n\n    if (changed) {\n      this.#focused = focused;\n      this.onFocus();\n    }\n  }\n\n  onFocus() {\n    const isFocused = this.isFocused();\n    this.listeners.forEach(listener => {\n      listener(isFocused);\n    });\n  }\n\n  isFocused() {\n    if (typeof this.#focused === \"boolean\") {\n      return this.#focused;\n    }\n\n    return globalThis.document?.visibilityState !== \"hidden\";\n  }\n\n};\nvar focusManager = new FocusManager();\nexport { FocusManager, focusManager };","map":{"version":3,"mappings":";AAAA,SAASA,YAAT,QAA6B,mBAA7B;AACA,SAASC,QAAT,QAAyB,YAAzB;AAQO,IAAMC,eAAN,cAA2BF,YAA3B,CAAkD;EACvD;EACA;EAEA;;EAEAG,cAAc;IACZ;;IACA,KAAK,MAAL,GAAeC,OAAD,IAAa;MAGzB,IAAI,CAACH,QAAD,IAAaI,OAAOC,gBAAxB,EAA0C;QACxC,MAAMC,WAAW,MAAMH,SAAvB;;QAEAC,OAAOC,gBAAP,CAAwB,kBAAxB,EAA4CC,QAA5C,EAAsD,KAAtD;QAEA,OAAO,MAAM;UAEXF,OAAOG,mBAAP,CAA2B,kBAA3B,EAA+CD,QAA/C;QACF,CAHA;MAIF;;MACA;IACF,CAdA;EAeF;;EAEUE,cAAoB;IAC5B,IAAI,CAAC,KAAK,QAAV,EAAoB;MAClB,KAAKC,gBAAL,CAAsB,KAAK,MAA3B;IACF;EACF;;EAEUC,gBAAgB;IACxB,IAAI,CAAC,KAAKC,YAAL,EAAL,EAA0B;MACxB,KAAK,QAAL;MACA,KAAK,QAAL,GAAgB,MAAhB;IACF;EACF;;EAEAF,iBAAiBG,KAAjB,EAAuC;IACrC,KAAK,MAAL,GAAcA,KAAd;IACA,KAAK,QAAL;IACA,KAAK,QAAL,GAAgBA,MAAOC,OAAD,IAAa;MACjC,IAAI,OAAOA,OAAP,KAAmB,SAAvB,EAAkC;QAChC,KAAKC,UAAL,CAAgBD,OAAhB;MACF,CAFA,MAEO;QACL,KAAKV,OAAL;MACF;IACD,CANe,CAAhB;EAOF;;EAEAW,WAAWD,OAAX,EAAoC;IAClC,MAAME,UAAU,KAAK,QAAL,KAAkBF,OAAlC;;IACA,IAAIE,OAAJ,EAAa;MACX,KAAK,QAAL,GAAgBF,OAAhB;MACA,KAAKV,OAAL;IACF;EACF;;EAEAA,UAAgB;IACd,MAAMa,YAAY,KAAKA,SAAL,EAAlB;IACA,KAAKC,SAAL,CAAeC,OAAf,CAAwBZ,QAAD,IAAc;MACnCA,SAASU,SAAT;IACD,CAFD;EAGF;;EAEAA,YAAqB;IACnB,IAAI,OAAO,KAAK,QAAZ,KAAyB,SAA7B,EAAwC;MACtC,OAAO,KAAK,QAAZ;IACF;;IAIA,OAAOG,WAAWC,QAAX,EAAqBC,eAArB,KAAyC,QAAhD;EACF;;AAzEuD,CAAlD;AA4EA,IAAMC,eAAe,IAAIrB,YAAJ,EAArB","names":["Subscribable","isServer","FocusManager","constructor","onFocus","window","addEventListener","listener","removeEventListener","onSubscribe","setEventListener","onUnsubscribe","hasListeners","setup","focused","setFocused","changed","isFocused","listeners","forEach","globalThis","document","visibilityState","focusManager"],"sources":["/Users/kartikaypratapsingh/Desktop/React_tut/React-query/client/node_modules/@tanstack/query-core/src/focusManager.ts"],"sourcesContent":["import { Subscribable } from './subscribable'\nimport { isServer } from './utils'\n\ntype Listener = (focused: boolean) => void\n\ntype SetupFn = (\n  setFocused: (focused?: boolean) => void,\n) => (() => void) | undefined\n\nexport class FocusManager extends Subscribable<Listener> {\n  #focused?: boolean\n  #cleanup?: () => void\n\n  #setup: SetupFn\n\n  constructor() {\n    super()\n    this.#setup = (onFocus) => {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!isServer && window.addEventListener) {\n        const listener = () => onFocus()\n        // Listen to visibilitychange\n        window.addEventListener('visibilitychange', listener, false)\n\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('visibilitychange', listener)\n        }\n      }\n      return\n    }\n  }\n\n  protected onSubscribe(): void {\n    if (!this.#cleanup) {\n      this.setEventListener(this.#setup)\n    }\n  }\n\n  protected onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.#cleanup?.()\n      this.#cleanup = undefined\n    }\n  }\n\n  setEventListener(setup: SetupFn): void {\n    this.#setup = setup\n    this.#cleanup?.()\n    this.#cleanup = setup((focused) => {\n      if (typeof focused === 'boolean') {\n        this.setFocused(focused)\n      } else {\n        this.onFocus()\n      }\n    })\n  }\n\n  setFocused(focused?: boolean): void {\n    const changed = this.#focused !== focused\n    if (changed) {\n      this.#focused = focused\n      this.onFocus()\n    }\n  }\n\n  onFocus(): void {\n    const isFocused = this.isFocused()\n    this.listeners.forEach((listener) => {\n      listener(isFocused)\n    })\n  }\n\n  isFocused(): boolean {\n    if (typeof this.#focused === 'boolean') {\n      return this.#focused\n    }\n\n    // document global can be unavailable in react native\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    return globalThis.document?.visibilityState !== 'hidden'\n  }\n}\n\nexport const focusManager = new FocusManager()\n"]},"metadata":{},"sourceType":"module"}