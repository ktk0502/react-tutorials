{"ast":null,"code":"// src/suspense.ts\nvar defaultThrowOnError = (_error, query) => query.state.data === void 0;\n\nvar ensureSuspenseTimers = defaultedOptions => {\n  if (defaultedOptions.suspense) {\n    const clamp = value => value === \"static\" ? value : Math.max(value ?? 1e3, 1e3);\n\n    const originalStaleTime = defaultedOptions.staleTime;\n    defaultedOptions.staleTime = typeof originalStaleTime === \"function\" ? function () {\n      return clamp(originalStaleTime(...arguments));\n    } : clamp(originalStaleTime);\n\n    if (typeof defaultedOptions.gcTime === \"number\") {\n      defaultedOptions.gcTime = Math.max(defaultedOptions.gcTime, 1e3);\n    }\n  }\n};\n\nvar willFetch = (result, isRestoring) => result.isLoading && result.isFetching && !isRestoring;\n\nvar shouldSuspend = (defaultedOptions, result) => defaultedOptions?.suspense && result.isPending;\n\nvar fetchOptimistic = (defaultedOptions, observer, errorResetBoundary) => observer.fetchOptimistic(defaultedOptions).catch(() => {\n  errorResetBoundary.clearReset();\n});\n\nexport { defaultThrowOnError, ensureSuspenseTimers, fetchOptimistic, shouldSuspend, willFetch };","map":{"version":3,"mappings":";AAUO,IAAMA,sBAAsB,CAMjCC,MANiC,EAOjCC,KAPiC,KAQ9BA,MAAMC,KAAN,CAAYC,IAAZ,KAAqB,MARnB;;AAUA,IAAMC,uBACXC,gBADkC,IAE/B;EACH,IAAIA,iBAAiBC,QAArB,EAA+B;IAI7B,MAAMC,QAASC,KAAD,IACZA,UAAU,QAAV,GAAqBA,KAArB,GAA6BC,KAAKC,GAAL,CAASF,SAAS,GAAlB,EAAwB,GAAxB,CAD/B;;IAGA,MAAMG,oBAAoBN,iBAAiBO,SAA3C;IACAP,iBAAiBO,SAAjB,GACE,OAAOD,iBAAP,KAA6B,UAA7B,GACI;MAAA,OAAaJ,MAAMI,kBAAkB,YAAlB,CAAN,CAAb;IAAA,CADJ,GAEIJ,MAAMI,iBAAN,CAHN;;IAKA,IAAI,OAAON,iBAAiBQ,MAAxB,KAAmC,QAAvC,EAAiD;MAC/CR,iBAAiBQ,MAAjB,GAA0BJ,KAAKC,GAAL,CAASL,iBAAiBQ,MAA1B,EAAkC,GAAlC,CAA1B;IACF;EACF;AACF,CApBO;;AAsBA,IAAMC,YAAY,CACvBC,MADuB,EAEvBC,WAFuB,KAGpBD,OAAOE,SAAP,IAAoBF,OAAOG,UAA3B,IAAyC,CAACF,WAHxC;;AAKA,IAAMG,gBAAgB,CAC3Bd,gBAD2B,EAI3BU,MAJ2B,KAKxBV,kBAAkBC,QAAlB,IAA8BS,OAAOK,SALnC;;AAOA,IAAMC,kBAAkB,CAO7BhB,gBAP6B,EAc7BiB,QAd6B,EAe7BC,kBAf6B,KAiB7BD,SAASD,eAAT,CAAyBhB,gBAAzB,EAA2CmB,KAA3C,CAAiD,MAAM;EACrDD,mBAAmBE,UAAnB;AACD,CAFD,CAjBK","names":["defaultThrowOnError","_error","query","state","data","ensureSuspenseTimers","defaultedOptions","suspense","clamp","value","Math","max","originalStaleTime","staleTime","gcTime","willFetch","result","isRestoring","isLoading","isFetching","shouldSuspend","isPending","fetchOptimistic","observer","errorResetBoundary","catch","clearReset"],"sources":["/Users/kartikaypratapsingh/Desktop/React_tut/React-query/client/node_modules/@tanstack/react-query/src/suspense.ts"],"sourcesContent":["import type {\n  DefaultError,\n  DefaultedQueryObserverOptions,\n  Query,\n  QueryKey,\n  QueryObserver,\n  QueryObserverResult,\n} from '@tanstack/query-core'\nimport type { QueryErrorResetBoundaryValue } from './QueryErrorResetBoundary'\n\nexport const defaultThrowOnError = <\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  _error: TError,\n  query: Query<TQueryFnData, TError, TData, TQueryKey>,\n) => query.state.data === undefined\n\nexport const ensureSuspenseTimers = (\n  defaultedOptions: DefaultedQueryObserverOptions<any, any, any, any, any>,\n) => {\n  if (defaultedOptions.suspense) {\n    // Handle staleTime to ensure minimum 1000ms in Suspense mode\n    // This prevents unnecessary refetching when components remount after suspending\n\n    const clamp = (value: number | 'static' | undefined) =>\n      value === 'static' ? value : Math.max(value ?? 1000, 1000)\n\n    const originalStaleTime = defaultedOptions.staleTime\n    defaultedOptions.staleTime =\n      typeof originalStaleTime === 'function'\n        ? (...args) => clamp(originalStaleTime(...args))\n        : clamp(originalStaleTime)\n\n    if (typeof defaultedOptions.gcTime === 'number') {\n      defaultedOptions.gcTime = Math.max(defaultedOptions.gcTime, 1000)\n    }\n  }\n}\n\nexport const willFetch = (\n  result: QueryObserverResult<any, any>,\n  isRestoring: boolean,\n) => result.isLoading && result.isFetching && !isRestoring\n\nexport const shouldSuspend = (\n  defaultedOptions:\n    | DefaultedQueryObserverOptions<any, any, any, any, any>\n    | undefined,\n  result: QueryObserverResult<any, any>,\n) => defaultedOptions?.suspense && result.isPending\n\nexport const fetchOptimistic = <\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  defaultedOptions: DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  observer: QueryObserver<TQueryFnData, TError, TData, TQueryData, TQueryKey>,\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) =>\n  observer.fetchOptimistic(defaultedOptions).catch(() => {\n    errorResetBoundary.clearReset()\n  })\n"]},"metadata":{},"sourceType":"module"}