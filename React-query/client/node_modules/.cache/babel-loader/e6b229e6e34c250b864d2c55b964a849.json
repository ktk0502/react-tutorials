{"ast":null,"code":"// src/index.ts\nimport { CancelledError } from \"./retryer.js\";\nimport { QueryCache } from \"./queryCache.js\";\nimport { QueryClient } from \"./queryClient.js\";\nimport { QueryObserver } from \"./queryObserver.js\";\nimport { QueriesObserver } from \"./queriesObserver.js\";\nimport { InfiniteQueryObserver } from \"./infiniteQueryObserver.js\";\nimport { MutationCache } from \"./mutationCache.js\";\nimport { MutationObserver } from \"./mutationObserver.js\";\nimport { notifyManager, defaultScheduler } from \"./notifyManager.js\";\nimport { focusManager } from \"./focusManager.js\";\nimport { onlineManager } from \"./onlineManager.js\";\nimport { hashKey, partialMatchKey, replaceEqualDeep, isServer, matchQuery, matchMutation, keepPreviousData, skipToken, noop, shouldThrowError } from \"./utils.js\";\nimport { isCancelledError } from \"./retryer.js\";\nimport { dehydrate, hydrate, defaultShouldDehydrateQuery, defaultShouldDehydrateMutation } from \"./hydration.js\";\nimport { streamedQuery } from \"./streamedQuery.js\";\nexport * from \"./types.js\";\nimport { Query } from \"./query.js\";\nimport { Mutation } from \"./mutation.js\";\nexport { CancelledError, InfiniteQueryObserver, Mutation, MutationCache, MutationObserver, QueriesObserver, Query, QueryCache, QueryClient, QueryObserver, defaultScheduler, defaultShouldDehydrateMutation, defaultShouldDehydrateQuery, dehydrate, streamedQuery as experimental_streamedQuery, focusManager, hashKey, hydrate, isCancelledError, isServer, keepPreviousData, matchMutation, matchQuery, noop, notifyManager, onlineManager, partialMatchKey, replaceEqualDeep, shouldThrowError, skipToken };","map":{"version":3,"mappings":";AAEA,SAASA,cAAT,QAA+B,cAA/B;AACA,SAASC,UAAT,QAA2B,iBAA3B;AAEA,SAASC,WAAT,QAA4B,kBAA5B;AACA,SAASC,aAAT,QAA8B,oBAA9B;AACA,SAASC,eAAT,QAAgC,sBAAhC;AACA,SAASC,qBAAT,QAAsC,4BAAtC;AACA,SAASC,aAAT,QAA8B,oBAA9B;AAEA,SAASC,gBAAT,QAAiC,uBAAjC;AACA,SAASC,aAAT,EAAwBC,gBAAxB,QAAgD,oBAAhD;AACA,SAASC,YAAT,QAA6B,mBAA7B;AACA,SAASC,aAAT,QAA8B,oBAA9B;AACA,SACEC,OADF,EAEEC,eAFF,EAGEC,gBAHF,EAIEC,QAJF,EAKEC,UALF,EAMEC,aANF,EAOEC,gBAPF,EAQEC,SARF,EASEC,IATF,EAUEC,gBAVF,QAWO,YAXP;AAaA,SAASC,gBAAT,QAAiC,cAAjC;AACA,SACEC,SADF,EAEEC,OAFF,EAGEC,2BAHF,EAIEC,8BAJF,QAKO,gBALP;AAOA,SAA0BC,aAA1B,QAA4D,oBAA5D;AAGA,cAAc,YAAd;AAEA,SAASC,KAAT,QAAsB,YAAtB;AAEA,SAASC,QAAT,QAAyB,eAAzB","names":["CancelledError","QueryCache","QueryClient","QueryObserver","QueriesObserver","InfiniteQueryObserver","MutationCache","MutationObserver","notifyManager","defaultScheduler","focusManager","onlineManager","hashKey","partialMatchKey","replaceEqualDeep","isServer","matchQuery","matchMutation","keepPreviousData","skipToken","noop","shouldThrowError","isCancelledError","dehydrate","hydrate","defaultShouldDehydrateQuery","defaultShouldDehydrateMutation","streamedQuery","Query","Mutation"],"sources":["/Users/kartikaypratapsingh/Desktop/React_tut/React-query/client/node_modules/@tanstack/query-core/src/index.ts"],"sourcesContent":["/* istanbul ignore file */\n\nexport { CancelledError } from './retryer'\nexport { QueryCache } from './queryCache'\nexport type { QueryCacheNotifyEvent } from './queryCache'\nexport { QueryClient } from './queryClient'\nexport { QueryObserver } from './queryObserver'\nexport { QueriesObserver } from './queriesObserver'\nexport { InfiniteQueryObserver } from './infiniteQueryObserver'\nexport { MutationCache } from './mutationCache'\nexport type { MutationCacheNotifyEvent } from './mutationCache'\nexport { MutationObserver } from './mutationObserver'\nexport { notifyManager, defaultScheduler } from './notifyManager'\nexport { focusManager } from './focusManager'\nexport { onlineManager } from './onlineManager'\nexport {\n  hashKey,\n  partialMatchKey,\n  replaceEqualDeep,\n  isServer,\n  matchQuery,\n  matchMutation,\n  keepPreviousData,\n  skipToken,\n  noop,\n  shouldThrowError,\n} from './utils'\nexport type { MutationFilters, QueryFilters, Updater, SkipToken } from './utils'\nexport { isCancelledError } from './retryer'\nexport {\n  dehydrate,\n  hydrate,\n  defaultShouldDehydrateQuery,\n  defaultShouldDehydrateMutation,\n} from './hydration'\n\nexport { streamedQuery as experimental_streamedQuery } from './streamedQuery'\n\n// Types\nexport * from './types'\nexport type { QueryState } from './query'\nexport { Query } from './query'\nexport type { MutationState } from './mutation'\nexport { Mutation } from './mutation'\nexport type {\n  DehydrateOptions,\n  DehydratedState,\n  HydrateOptions,\n} from './hydration'\nexport type { QueriesObserverOptions } from './queriesObserver'\n"]},"metadata":{},"sourceType":"module"}