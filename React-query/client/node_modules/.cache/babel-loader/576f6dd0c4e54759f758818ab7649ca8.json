{"ast":null,"code":"// src/hydration.ts\nimport { tryResolveSync } from \"./thenable.js\";\n\nfunction defaultTransformerFn(data) {\n  return data;\n}\n\nfunction dehydrateMutation(mutation) {\n  return {\n    mutationKey: mutation.options.mutationKey,\n    state: mutation.state,\n    ...(mutation.options.scope && {\n      scope: mutation.options.scope\n    }),\n    ...(mutation.meta && {\n      meta: mutation.meta\n    })\n  };\n}\n\nfunction dehydrateQuery(query, serializeData, shouldRedactErrors) {\n  return {\n    dehydratedAt: Date.now(),\n    state: { ...query.state,\n      ...(query.state.data !== void 0 && {\n        data: serializeData(query.state.data)\n      })\n    },\n    queryKey: query.queryKey,\n    queryHash: query.queryHash,\n    ...(query.state.status === \"pending\" && {\n      promise: query.promise?.then(serializeData).catch(error => {\n        if (!shouldRedactErrors(error)) {\n          return Promise.reject(error);\n        }\n\n        if (process.env.NODE_ENV !== \"production\") {\n          console.error(`A query that was dehydrated as pending ended up rejecting. [${query.queryHash}]: ${error}; The error will be redacted in production builds`);\n        }\n\n        return Promise.reject(new Error(\"redacted\"));\n      })\n    }),\n    ...(query.meta && {\n      meta: query.meta\n    })\n  };\n}\n\nfunction defaultShouldDehydrateMutation(mutation) {\n  return mutation.state.isPaused;\n}\n\nfunction defaultShouldDehydrateQuery(query) {\n  return query.state.status === \"success\";\n}\n\nfunction defaultShouldRedactErrors(_) {\n  return true;\n}\n\nfunction dehydrate(client) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const filterMutation = options.shouldDehydrateMutation ?? client.getDefaultOptions().dehydrate?.shouldDehydrateMutation ?? defaultShouldDehydrateMutation;\n  const mutations = client.getMutationCache().getAll().flatMap(mutation => filterMutation(mutation) ? [dehydrateMutation(mutation)] : []);\n  const filterQuery = options.shouldDehydrateQuery ?? client.getDefaultOptions().dehydrate?.shouldDehydrateQuery ?? defaultShouldDehydrateQuery;\n  const shouldRedactErrors = options.shouldRedactErrors ?? client.getDefaultOptions().dehydrate?.shouldRedactErrors ?? defaultShouldRedactErrors;\n  const serializeData = options.serializeData ?? client.getDefaultOptions().dehydrate?.serializeData ?? defaultTransformerFn;\n  const queries = client.getQueryCache().getAll().flatMap(query => filterQuery(query) ? [dehydrateQuery(query, serializeData, shouldRedactErrors)] : []);\n  return {\n    mutations,\n    queries\n  };\n}\n\nfunction hydrate(client, dehydratedState, options) {\n  if (typeof dehydratedState !== \"object\" || dehydratedState === null) {\n    return;\n  }\n\n  const mutationCache = client.getMutationCache();\n  const queryCache = client.getQueryCache();\n  const deserializeData = options?.defaultOptions?.deserializeData ?? client.getDefaultOptions().hydrate?.deserializeData ?? defaultTransformerFn;\n  const mutations = dehydratedState.mutations || [];\n  const queries = dehydratedState.queries || [];\n  mutations.forEach(_ref => {\n    let {\n      state,\n      ...mutationOptions\n    } = _ref;\n    mutationCache.build(client, { ...client.getDefaultOptions().hydrate?.mutations,\n      ...options?.defaultOptions?.mutations,\n      ...mutationOptions\n    }, state);\n  });\n  queries.forEach(_ref2 => {\n    let {\n      queryKey,\n      state,\n      queryHash,\n      meta,\n      promise,\n      dehydratedAt\n    } = _ref2;\n    const syncData = promise ? tryResolveSync(promise) : void 0;\n    const rawData = state.data === void 0 ? syncData?.data : state.data;\n    const data = rawData === void 0 ? rawData : deserializeData(rawData);\n    let query = queryCache.get(queryHash);\n    const existingQueryIsPending = query?.state.status === \"pending\";\n    const existingQueryIsFetching = query?.state.fetchStatus === \"fetching\";\n\n    if (query) {\n      const hasNewerSyncData = syncData && // We only need this undefined check to handle older dehydration\n      // payloads that might not have dehydratedAt\n      dehydratedAt !== void 0 && dehydratedAt > query.state.dataUpdatedAt;\n\n      if (state.dataUpdatedAt > query.state.dataUpdatedAt || hasNewerSyncData) {\n        const {\n          fetchStatus: _ignored,\n          ...serializedState\n        } = state;\n        query.setState({ ...serializedState,\n          data\n        });\n      }\n    } else {\n      query = queryCache.build(client, { ...client.getDefaultOptions().hydrate?.queries,\n        ...options?.defaultOptions?.queries,\n        queryKey,\n        queryHash,\n        meta\n      }, // Reset fetch status to idle to avoid\n      // query being stuck in fetching state upon hydration\n      { ...state,\n        data,\n        fetchStatus: \"idle\",\n        status: data !== void 0 ? \"success\" : state.status\n      });\n    }\n\n    if (promise && !existingQueryIsPending && !existingQueryIsFetching && ( // Only hydrate if dehydration is newer than any existing data,\n    // this is always true for new queries\n    dehydratedAt === void 0 || dehydratedAt > query.state.dataUpdatedAt)) {\n      void query.fetch(void 0, {\n        // RSC transformed promises are not thenable\n        initialPromise: Promise.resolve(promise).then(deserializeData)\n      });\n    }\n  });\n}\n\nexport { defaultShouldDehydrateMutation, defaultShouldDehydrateQuery, dehydrate, hydrate };","map":{"version":3,"mappings":"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","names":["tryResolveSync","defaultTransformerFn","data","dehydrateMutation","mutation","mutationKey","options","state","scope","meta","dehydrateQuery","query","serializeData","shouldRedactErrors","dehydratedAt","Date","now","queryKey","queryHash","status","promise","then","catch","error","Promise","reject","process","env","NODE_ENV","console","Error","defaultShouldDehydrateMutation","isPaused","defaultShouldDehydrateQuery","defaultShouldRedactErrors","_","dehydrate","client","filterMutation","shouldDehydrateMutation","getDefaultOptions","mutations","getMutationCache","getAll","flatMap","filterQuery","shouldDehydrateQuery","queries","getQueryCache","hydrate","dehydratedState","mutationCache","queryCache","deserializeData","defaultOptions","forEach","mutationOptions","build","syncData","rawData","get","existingQueryIsPending","existingQueryIsFetching","fetchStatus","hasNewerSyncData","dataUpdatedAt","_ignored","serializedState","setState","fetch","initialPromise","resolve"],"sources":["/Users/kartikaypratapsingh/Desktop/React_tut/React-query/client/node_modules/@tanstack/query-core/src/hydration.ts"],"sourcesContent":["import { tryResolveSync } from './thenable'\nimport type {\n  DefaultError,\n  MutationKey,\n  MutationMeta,\n  MutationOptions,\n  MutationScope,\n  QueryKey,\n  QueryMeta,\n  QueryOptions,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport type { Query, QueryState } from './query'\nimport type { Mutation, MutationState } from './mutation'\n\n// TYPES\ntype TransformerFn = (data: any) => any\nfunction defaultTransformerFn(data: any): any {\n  return data\n}\n\nexport interface DehydrateOptions {\n  serializeData?: TransformerFn\n  shouldDehydrateMutation?: (mutation: Mutation) => boolean\n  shouldDehydrateQuery?: (query: Query) => boolean\n  shouldRedactErrors?: (error: unknown) => boolean\n}\n\nexport interface HydrateOptions {\n  defaultOptions?: {\n    deserializeData?: TransformerFn\n    queries?: QueryOptions\n    mutations?: MutationOptions<unknown, DefaultError, unknown, unknown>\n  }\n}\n\ninterface DehydratedMutation {\n  mutationKey?: MutationKey\n  state: MutationState\n  meta?: MutationMeta\n  scope?: MutationScope\n}\n\ninterface DehydratedQuery {\n  queryHash: string\n  queryKey: QueryKey\n  state: QueryState\n  promise?: Promise<unknown>\n  meta?: QueryMeta\n  // This is only optional because older versions of Query might have dehydrated\n  // without it which we need to handle for backwards compatibility.\n  // This should be changed to required in the future.\n  dehydratedAt?: number\n}\n\nexport interface DehydratedState {\n  mutations: Array<DehydratedMutation>\n  queries: Array<DehydratedQuery>\n}\n\n// FUNCTIONS\n\nfunction dehydrateMutation(mutation: Mutation): DehydratedMutation {\n  return {\n    mutationKey: mutation.options.mutationKey,\n    state: mutation.state,\n    ...(mutation.options.scope && { scope: mutation.options.scope }),\n    ...(mutation.meta && { meta: mutation.meta }),\n  }\n}\n\n// Most config is not dehydrated but instead meant to configure again when\n// consuming the de/rehydrated data, typically with useQuery on the client.\n// Sometimes it might make sense to prefetch data on the server and include\n// in the html-payload, but not consume it on the initial render.\nfunction dehydrateQuery(\n  query: Query,\n  serializeData: TransformerFn,\n  shouldRedactErrors: (error: unknown) => boolean,\n): DehydratedQuery {\n  return {\n    dehydratedAt: Date.now(),\n    state: {\n      ...query.state,\n      ...(query.state.data !== undefined && {\n        data: serializeData(query.state.data),\n      }),\n    },\n    queryKey: query.queryKey,\n    queryHash: query.queryHash,\n    ...(query.state.status === 'pending' && {\n      promise: query.promise?.then(serializeData).catch((error) => {\n        if (!shouldRedactErrors(error)) {\n          // Reject original error if it should not be redacted\n          return Promise.reject(error)\n        }\n        // If not in production, log original error before rejecting redacted error\n        if (process.env.NODE_ENV !== 'production') {\n          console.error(\n            `A query that was dehydrated as pending ended up rejecting. [${query.queryHash}]: ${error}; The error will be redacted in production builds`,\n          )\n        }\n        return Promise.reject(new Error('redacted'))\n      }),\n    }),\n    ...(query.meta && { meta: query.meta }),\n  }\n}\n\nexport function defaultShouldDehydrateMutation(mutation: Mutation) {\n  return mutation.state.isPaused\n}\n\nexport function defaultShouldDehydrateQuery(query: Query) {\n  return query.state.status === 'success'\n}\n\nfunction defaultShouldRedactErrors(_: unknown) {\n  return true\n}\n\nexport function dehydrate(\n  client: QueryClient,\n  options: DehydrateOptions = {},\n): DehydratedState {\n  const filterMutation =\n    options.shouldDehydrateMutation ??\n    client.getDefaultOptions().dehydrate?.shouldDehydrateMutation ??\n    defaultShouldDehydrateMutation\n\n  const mutations = client\n    .getMutationCache()\n    .getAll()\n    .flatMap((mutation) =>\n      filterMutation(mutation) ? [dehydrateMutation(mutation)] : [],\n    )\n\n  const filterQuery =\n    options.shouldDehydrateQuery ??\n    client.getDefaultOptions().dehydrate?.shouldDehydrateQuery ??\n    defaultShouldDehydrateQuery\n\n  const shouldRedactErrors =\n    options.shouldRedactErrors ??\n    client.getDefaultOptions().dehydrate?.shouldRedactErrors ??\n    defaultShouldRedactErrors\n\n  const serializeData =\n    options.serializeData ??\n    client.getDefaultOptions().dehydrate?.serializeData ??\n    defaultTransformerFn\n\n  const queries = client\n    .getQueryCache()\n    .getAll()\n    .flatMap((query) =>\n      filterQuery(query)\n        ? [dehydrateQuery(query, serializeData, shouldRedactErrors)]\n        : [],\n    )\n\n  return { mutations, queries }\n}\n\nexport function hydrate(\n  client: QueryClient,\n  dehydratedState: unknown,\n  options?: HydrateOptions,\n): void {\n  if (typeof dehydratedState !== 'object' || dehydratedState === null) {\n    return\n  }\n\n  const mutationCache = client.getMutationCache()\n  const queryCache = client.getQueryCache()\n  const deserializeData =\n    options?.defaultOptions?.deserializeData ??\n    client.getDefaultOptions().hydrate?.deserializeData ??\n    defaultTransformerFn\n\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  const mutations = (dehydratedState as DehydratedState).mutations || []\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  const queries = (dehydratedState as DehydratedState).queries || []\n\n  mutations.forEach(({ state, ...mutationOptions }) => {\n    mutationCache.build(\n      client,\n      {\n        ...client.getDefaultOptions().hydrate?.mutations,\n        ...options?.defaultOptions?.mutations,\n        ...mutationOptions,\n      },\n      state,\n    )\n  })\n\n  queries.forEach(\n    ({ queryKey, state, queryHash, meta, promise, dehydratedAt }) => {\n      const syncData = promise ? tryResolveSync(promise) : undefined\n      const rawData = state.data === undefined ? syncData?.data : state.data\n      const data = rawData === undefined ? rawData : deserializeData(rawData)\n\n      let query = queryCache.get(queryHash)\n      const existingQueryIsPending = query?.state.status === 'pending'\n      const existingQueryIsFetching = query?.state.fetchStatus === 'fetching'\n\n      // Do not hydrate if an existing query exists with newer data\n      if (query) {\n        const hasNewerSyncData =\n          syncData &&\n          // We only need this undefined check to handle older dehydration\n          // payloads that might not have dehydratedAt\n          dehydratedAt !== undefined &&\n          dehydratedAt > query.state.dataUpdatedAt\n        if (\n          state.dataUpdatedAt > query.state.dataUpdatedAt ||\n          hasNewerSyncData\n        ) {\n          // omit fetchStatus from dehydrated state\n          // so that query stays in its current fetchStatus\n          const { fetchStatus: _ignored, ...serializedState } = state\n          query.setState({\n            ...serializedState,\n            data,\n          })\n        }\n      } else {\n        // Restore query\n        query = queryCache.build(\n          client,\n          {\n            ...client.getDefaultOptions().hydrate?.queries,\n            ...options?.defaultOptions?.queries,\n            queryKey,\n            queryHash,\n            meta,\n          },\n          // Reset fetch status to idle to avoid\n          // query being stuck in fetching state upon hydration\n          {\n            ...state,\n            data,\n            fetchStatus: 'idle',\n            status: data !== undefined ? 'success' : state.status,\n          },\n        )\n      }\n\n      if (\n        promise &&\n        !existingQueryIsPending &&\n        !existingQueryIsFetching &&\n        // Only hydrate if dehydration is newer than any existing data,\n        // this is always true for new queries\n        (dehydratedAt === undefined || dehydratedAt > query.state.dataUpdatedAt)\n      ) {\n        // This doesn't actually fetch - it just creates a retryer\n        // which will re-use the passed `initialPromise`\n        // Note that we need to call these even when data was synchronously\n        // available, as we still need to set up the retryer\n        void query.fetch(undefined, {\n          // RSC transformed promises are not thenable\n          initialPromise: Promise.resolve(promise).then(deserializeData),\n        })\n      }\n    },\n  )\n}\n"]},"metadata":{},"sourceType":"module"}