{"ast":null,"code":"\"use client\"; // src/useMutation.ts\n\nimport * as React from \"react\";\nimport { MutationObserver, noop, notifyManager, shouldThrowError } from \"@tanstack/query-core\";\nimport { useQueryClient } from \"./QueryClientProvider.js\";\n\nfunction useMutation(options, queryClient) {\n  const client = useQueryClient(queryClient);\n  const [observer] = React.useState(() => new MutationObserver(client, options));\n  React.useEffect(() => {\n    observer.setOptions(options);\n  }, [observer, options]);\n  const result = React.useSyncExternalStore(React.useCallback(onStoreChange => observer.subscribe(notifyManager.batchCalls(onStoreChange)), [observer]), () => observer.getCurrentResult(), () => observer.getCurrentResult());\n  const mutate = React.useCallback((variables, mutateOptions) => {\n    observer.mutate(variables, mutateOptions).catch(noop);\n  }, [observer]);\n\n  if (result.error && shouldThrowError(observer.options.throwOnError, [result.error])) {\n    throw result.error;\n  }\n\n  return { ...result,\n    mutate,\n    mutateAsync: result.mutate\n  };\n}\n\nexport { useMutation };","map":{"version":3,"mappings":";;AACA,YAAYA,KAAZ,MAAuB,OAAvB;AACA,SACEC,gBADF,EAEEC,IAFF,EAGEC,aAHF,EAIEC,gBAJF,QAKO,sBALP;AAMA,SAASC,cAAT,QAA+B,0BAA/B;;AAUO,SAASC,WAAT,CAMLC,OANK,EAOLC,WAPK,EAQmD;EACxD,MAAMC,SAASJ,eAAeG,WAAf,CAAf;EAEA,MAAM,CAACE,QAAD,IAAmBV,eACvB,MACE,IAAIC,gBAAJ,CACEQ,MADF,EAEEF,OAFF,CAFqB,CAAzB;EAQMP,gBAAU,MAAM;IACpBU,SAASC,UAAT,CAAoBJ,OAApB;EACF,CAFM,EAEH,CAACG,QAAD,EAAWH,OAAX,CAFG;EAIN,MAAMK,SAAeZ,2BACbA,kBACHa,aAAD,IACEH,SAASI,SAAT,CAAmBX,cAAcY,UAAd,CAAyBF,aAAzB,CAAnB,CAFE,EAGJ,CAACH,QAAD,CAHI,CADa,EAMnB,MAAMA,SAASM,gBAAT,EANa,EAOnB,MAAMN,SAASM,gBAAT,EAPa,CAArB;EAUA,MAAMC,SAAejB,kBAGnB,CAACkB,SAAD,EAAYC,aAAZ,KAA8B;IAC5BT,SAASO,MAAT,CAAgBC,SAAhB,EAA2BC,aAA3B,EAA0CC,KAA1C,CAAgDlB,IAAhD;EACF,CALmB,EAMnB,CAACQ,QAAD,CANmB,CAArB;;EASA,IACEE,OAAOS,KAAP,IACAjB,iBAAiBM,SAASH,OAAT,CAAiBe,YAAlC,EAAgD,CAACV,OAAOS,KAAR,CAAhD,CAFF,EAGE;IACA,MAAMT,OAAOS,KAAb;EACF;;EAEA,OAAO,EAAE,GAAGT,MAAL;IAAaK,MAAb;IAAqBM,aAAaX,OAAOK;EAAzC,CAAP;AACF","names":["React","MutationObserver","noop","notifyManager","shouldThrowError","useQueryClient","useMutation","options","queryClient","client","observer","setOptions","result","onStoreChange","subscribe","batchCalls","getCurrentResult","mutate","variables","mutateOptions","catch","error","throwOnError","mutateAsync"],"sources":["/Users/kartikaypratapsingh/Desktop/React_tut/React-query/client/node_modules/@tanstack/react-query/src/useMutation.ts"],"sourcesContent":["'use client'\nimport * as React from 'react'\nimport {\n  MutationObserver,\n  noop,\n  notifyManager,\n  shouldThrowError,\n} from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport type {\n  UseMutateFunction,\n  UseMutationOptions,\n  UseMutationResult,\n} from './types'\nimport type { DefaultError, QueryClient } from '@tanstack/query-core'\n\n// HOOK\n\nexport function useMutation<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = void,\n  TContext = unknown,\n>(\n  options: UseMutationOptions<TData, TError, TVariables, TContext>,\n  queryClient?: QueryClient,\n): UseMutationResult<TData, TError, TVariables, TContext> {\n  const client = useQueryClient(queryClient)\n\n  const [observer] = React.useState(\n    () =>\n      new MutationObserver<TData, TError, TVariables, TContext>(\n        client,\n        options,\n      ),\n  )\n\n  React.useEffect(() => {\n    observer.setOptions(options)\n  }, [observer, options])\n\n  const result = React.useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  const mutate = React.useCallback<\n    UseMutateFunction<TData, TError, TVariables, TContext>\n  >(\n    (variables, mutateOptions) => {\n      observer.mutate(variables, mutateOptions).catch(noop)\n    },\n    [observer],\n  )\n\n  if (\n    result.error &&\n    shouldThrowError(observer.options.throwOnError, [result.error])\n  ) {\n    throw result.error\n  }\n\n  return { ...result, mutate, mutateAsync: result.mutate }\n}\n"]},"metadata":{},"sourceType":"module"}